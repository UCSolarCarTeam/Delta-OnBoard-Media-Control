!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
INT64_C	Main.cpp	35;"	d	file:
MusicBar	MusicBar.cpp	/^MusicBar::MusicBar(SongPlayer *songPlayer)$/;"	f	class:MusicBar
RUNNINGONINTEL	Main.cpp	47;"	d	file:
RUNNINGONPI	Main.cpp	51;"	d	file:
SCREEN_HEIGHT	Main.cpp	56;"	d	file:
SCREEN_WIDTH	Main.cpp	57;"	d	file:
SongLoader	SongLoader.cpp	/^SongLoader::SongLoader()$/;"	f	class:SongLoader
SongPlayer	SongPlayer.cpp	/^SongPlayer::SongPlayer()$/;"	f	class:SongPlayer
ThreadFunction	SongPlayer.cpp	/^void SongPlayer::ThreadFunction()$/;"	f	class:SongPlayer
ThreadFunction	videoStream.cpp	/^void VideoStream::ThreadFunction()$/;"	f	class:VideoStream
UINT64_C	Main.cpp	36;"	d	file:
VideoStream	videoStream.cpp	/^VideoStream::VideoStream()$/;"	f	class:VideoStream
WiringPiButtons	WiringPiButtons.cpp	/^WiringPiButtons::WiringPiButtons()$/;"	f	class:WiringPiButtons
backupCamera	Main.cpp	/^VideoStream backupCamera;$/;"	v
changeVolume	SongPlayer.cpp	/^void SongPlayer::changeVolume(double change)$/;"	f	class:SongPlayer
close	Main.cpp	/^void close()$/;"	f
close	backup_camera.cpp	/^void BackupCamera::close() {$/;"	f	class:BackupCamera
closeSongPlayer	SongPlayer.cpp	/^void SongPlayer::closeSongPlayer()$/;"	f	class:SongPlayer
convertToString	MusicBar.cpp	/^std::string MusicBar::convertToString(int songIntTime)$/;"	f	class:MusicBar
createGeometricSurface	MusicBar.cpp	/^void MusicBar::createGeometricSurface(SDL_Surface* geometricSurface, int surfaceWidth, int surfaceHeight, SDL_Rect surfaceLocation, int surfaceRed, int surfaceGreen, int surfaceBlue)$/;"	f	class:MusicBar
currentSong	SongLoader.cpp	/^std::string SongLoader::currentSong()$/;"	f	class:SongLoader
currentSong	SongPlayer.cpp	/^std::string SongPlayer::currentSong()$/;"	f	class:SongPlayer
draw	graphics_handler.cpp	/^void GraphicsHandler::draw(SDL_Texture *texture, SDL_Rect texture_rect) {$/;"	f	class:GraphicsHandler
draw	graphics_handler.cpp	/^void GraphicsHandler::draw(SDL_Texture *texture, int x_pos, int y_pos) {$/;"	f	class:GraphicsHandler
drawSongName	MusicBar.cpp	/^void MusicBar::drawSongName()$/;"	f	class:MusicBar
drawSongTime	MusicBar.cpp	/^void MusicBar::drawSongTime()$/;"	f	class:MusicBar
drawVolumeBar	MusicBar.cpp	/^void MusicBar::drawVolumeBar()$/;"	f	class:MusicBar
freeMusic	SongPlayer.cpp	/^int SongPlayer::freeMusic()$/;"	f	class:SongPlayer
getCurrentTime	SongPlayer.cpp	/^double SongPlayer::getCurrentTime()$/;"	f	class:SongPlayer
getEvents	WiringPiButtons.cpp	/^WiringPiButtons::Button WiringPiButtons::getEvents()$/;"	f	class:WiringPiButtons
getFrame	videoStream.cpp	/^IplImage *VideoStream::getFrame()$/;"	f	class:VideoStream
getMaxVolume	SongPlayer.cpp	/^double SongPlayer::getMaxVolume()$/;"	f	class:SongPlayer
getSongLength	SongPlayer.cpp	/^double SongPlayer::getSongLength()$/;"	f	class:SongPlayer
getVolume	SongPlayer.cpp	/^double SongPlayer::getVolume()$/;"	f	class:SongPlayer
imageReady	videoStream.cpp	/^bool VideoStream::imageReady()$/;"	f	class:VideoStream
init	MusicBar.cpp	/^int MusicBar::init()$/;"	f	class:MusicBar
init	backup_camera.cpp	/^bool BackupCamera::init() {$/;"	f	class:BackupCamera
initButton	WiringPiButtons.cpp	/^void WiringPiButtons::initButton(int buttonNumber)$/;"	f	class:WiringPiButtons
initSongPlayer	SongPlayer.cpp	/^int SongPlayer::initSongPlayer()$/;"	f	class:SongPlayer
init_CameraSettings	Main.cpp	/^bool init_CameraSettings()$/;"	f
init_SDL	Main.cpp	/^bool init_SDL()$/;"	f
init_SDL	backup_camera.cpp	/^SDL_Renderer *BackupCamera::init_SDL() {$/;"	f	class:BackupCamera
init_screen_settings	backup_camera.cpp	/^void BackupCamera::init_screen_settings() {$/;"	f	class:BackupCamera
libraryLoad	SongLoader.cpp	/^int SongLoader::libraryLoad()$/;"	f	class:SongLoader
loadSong	SongPlayer.cpp	/^int SongPlayer::loadSong(char* songName)$/;"	f	class:SongPlayer
main	Main.cpp	/^int main(int argc, char* argv[])$/;"	f
musicBarRect	Main.cpp	/^SDL_Rect musicBarRect;$/;"	v
musicPlayer	Main.cpp	/^MusicBar gordonMusic(&musicPlayer);$/;"	v
musicPlayer	Main.cpp	/^SongPlayer musicPlayer;$/;"	v
nextSong	SongLoader.cpp	/^std::string SongLoader::nextSong()$/;"	f	class:SongLoader
nextSong	SongPlayer.cpp	/^int SongPlayer::nextSong()$/;"	f	class:SongPlayer
noSongs	Main.cpp	/^int noSongs;$/;"	v
playPause	SongPlayer.cpp	/^int SongPlayer::playPause()$/;"	f	class:SongPlayer
previousSong	SongLoader.cpp	/^std::string SongLoader::previousSong()$/;"	f	class:SongLoader
previousSong	SongPlayer.cpp	/^int SongPlayer::previousSong()$/;"	f	class:SongPlayer
processEvents	Main.cpp	/^void processEvents()$/;"	f
processGPIO	Main.cpp	/^void processGPIO(WiringPiButtons::Button button)$/;"	f
processGPIO	backup_camera.cpp	/^void BackupCamera::processGPIO() {$/;"	f	class:BackupCamera
process_events	backup_camera.cpp	/^void BackupCamera::process_events() {$/;"	f	class:BackupCamera
quit	Main.cpp	/^int quit;$/;"	v
readSongNames	SongLoader.cpp	/^int SongLoader::readSongNames()$/;"	f	class:SongLoader
renderer	Main.cpp	/^SDL_Renderer* renderer = NULL;$/;"	v
returnMusicBar	MusicBar.cpp	/^SDL_Surface* MusicBar::returnMusicBar()$/;"	f	class:MusicBar
setFont	MusicBar.cpp	/^void MusicBar::setFont(TTF_Font **musicBarFont, int fontSize)$/;"	f	class:MusicBar
showMusicBar	Main.cpp	/^int showMusicBar()$/;"	f
show_Camera	Main.cpp	/^int show_Camera()$/;"	f
shuffleSongNames	SongLoader.cpp	/^int SongLoader::shuffleSongNames()$/;"	f	class:SongLoader
signalToQuit	Main.cpp	/^void signalToQuit()$/;"	f
signalToQuit	videoStream.cpp	/^void VideoStream::signalToQuit()$/;"	f	class:VideoStream
songQuit	SongPlayer.cpp	/^void SongPlayer::songQuit()$/;"	f	class:SongPlayer
update	MusicBar.cpp	/^void MusicBar::update()$/;"	f	class:MusicBar
update	backup_camera.cpp	/^void BackupCamera::BackupCamera::update() {$/;"	f	class:BackupCamera::BackupCamera
videoRect	Main.cpp	/^SDL_Rect videoRect;$/;"	v
window	Main.cpp	/^SDL_Window* window = NULL;$/;"	v
